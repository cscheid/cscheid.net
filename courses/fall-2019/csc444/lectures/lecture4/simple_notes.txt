// -*- js2 -*-

//////////////////////////////////////////////////////////////////////////////
// basics

a = 0;
b = "1";
c = [1, 2, "3", [4]];
f = false;

console.log(c[0]);

obj = {
    key1: 3,
    key2: 4
};

console.log(obj.key1);
console.log(obj["key1"]);
console.log(obj["key" + 2]);

obj.key3 = "new value";

// this makes typos dangerous!
console.log(obj.key3);

/// procedural abstraction
function someFunction(v) {
    if (v < 10) {
        return v;
    } else {
        return v*v;
    }
}

function anotherFunction(v2) {
    var x = v2 * 10;
    return x * v2;
}

console.log(x); // Functions are the *only* things that create scopes for local variables

someOtherFunction = function(v) {
    if (v > 10) {
        return "big";
    } else {
        return "small";
    }
};

for (i=0; i<10; ++i) {
    console.log(i);
}

i = 3;
while (i<100) {
    console.log(i);
    i = i * 2;
}

i = "some case";
switch (i) {
case "string literals ok":
    console.log("Yes");
    break;
case "some case":
    console.log("Unlike C");
    break;
}

// Let's build something that looks like OOP
function createObject(content) {
    var result = {
        get: function() {
            return content;
        },
        set: function(newValue) {
            content = newValue;
        },
        twice: function() {
            return content * 2;
        }
    };
    return result;
}

f = createObject("something");
f.get();
f.twice();
f.set(20);
f.get();
f.twice();

// Inheritance, with no classes
base = {
    v1: 1,
    v2: 2
};

derived = {
    v1: 5,
    v3: 3,
    v4: 4
};

console.log(base.v1);
console.log(derived.v1);
console.log(derived.v2);
Object.setPrototypeOf(derived, base);
console.log(derived.v1);
console.log(derived.v2);

// But don't use setPrototypeOf in practice. Instead, use:
v = Object.create(null);
v2 = Object.create(base);
v3 = Object.create(v2); // etc.

// hasOwnProperty;
derived.hasOwnProperty("v2");

//////////////////////////////////////////////////////////////////////////////
// this

function weirdObject(value)
{
    return {
        x: value,
        get: function() {
            return this.x;
        },
        set: function(newValue) {
            this.x = newValue;
        }
    };
}

weird = weirdObject(3);
weird.x;
weird.get();
weird.set(5);
weird.get();
weird.x; // compare example to "createObject"

// every javascript scope includes the binding for "this"

// the syntax obj.method(parameters) is special
// and so is obj["method"](parameters). what happens in these cases
// is: Javascript calls the function at the slot "method" of object obj,
// and binds obj to "this" in the function scope.

// the lesson is important to remember, because d3 uses "this" extensively,
// and "this" interacts weirdly with storing function values in variables,
// which is also something that you'll do in d3. So you need to be aware these
// things:

nakedFunction = weird.get;
weird.get();
nakedFunction(); // *these are not the same thing*

//////////////////////////////////////////////////////////////////////////////
// DOM manipulation

function radians(v) { return v * (Math.PI / 180); }

mainDiv = document.getElementById("hi");
mainDiv.appendChild(document.createTextNode("This is some text"));

function divWithText(text) {
    var result = document.createElement("div");
    var textNode = document.createTextNode(text);
    result.appendChild(textNode);
    return result;
}

for (i=0; i<10; ++i) {
    mainDiv.appendChild(divWithText(String(i*i)));
}

x = divWithText("X");
mainDiv.appendChild(x);

function textAt(text, x, y) {
    var node = divWithText(text);
    node.setAttribute("style", "position:absolute; left: " + x + "px; top: " + y + "px;");
    return node;
}

mainDiv.appendChild(textAt("hi", 20, 30));
for (i=0; i<360; i+=30) {
    mainDiv.appendChild(textAt(
        String(i), 
        100 + 100 * Math.cos(radians(i)), 
        100 + 100 * Math.sin(radians(i))));
}

function numberText(v) {
    var node = divWithText(String(Math.floor(v)));
    node.update = function(amount) {
        v = v + amount;
        node.textContent = String(Math.floor(v));
        var x = 130 + 100 * Math.cos(radians(v));
        var y = 130 + 100 * Math.sin(radians(v));
        node.setAttribute("style", "position:absolute; left: " + x + "px; top: " + y + "px;");
    };
    node.update(0);
    return node;
}

var nodes = [];
for (i=0; i<360; i+=30) {
    node = numberText(i);
    mainDiv.appendChild(node);
    nodes.push(node);
}

for (i=0; i<nodes.length; ++i) {
    nodes[i].update(10);
}

function tick() {
    var i;
    for (i=0; i<nodes.length; ++i) {
        nodes[i].update(1);
    }
}

function badTickForever() {
    tick();
    badTickForever();
}

function tickForever() {
    tick();
    window.requestAnimationFrame(tickForever);
}

// window.requestAnimationFrame is a method that means:
// "give the browser an opportunity to update all the graphics it needs,
// handle UI events, and then call this function"

//////////////////////////////////////////////////////////////////////////////
// events

